import { PostSubtitle, PostText, PostTextBold } from "../components/blog/index";

const Post13 = () => {
  return (
    <div>
      <PostSubtitle subtitle="Wstƒôp" />
      <PostText text="W ko≈Ñcu zasilam innƒÖ kategoriƒô na blogu ni≈º rozkminy i JavaScript, szeregi zabawnych post√≥w rosnƒÖ w si≈Çƒô." />
      <PostText text="By przej≈õƒá do tematu g≈Ç√≥wnego p≈Çynnie nale≈ºy poruszyƒá pobie≈ºnie temat TypeScript-a." />
      <PostText text="Chyba mƒÖdrzej by≈Çoby nawet napisaƒá post o tym czym jest TypeScript a dopiero potem napisaƒá o Interface." />
      <PostSubtitle subtitle="Czym jest TypeScript" />
      <PostText text="W≈Ça≈õnie zboczyli≈õmy z g≈Ç√≥wnego szlaku dobrze oznakowanego, by wrƒÖbaƒá siƒô w gƒÖszcz badyli i chaszczy, by dotrzeƒá do definicji TypeScript-a." />
      <PostText text="PrzemierzajƒÖc JavaScriptowƒÖ d≈ºunglƒô go≈Çym okiem zauwa≈ºysz, ≈ºe zmienne mogƒÖ byƒá czym chcƒÖ, raz mogƒÖ byƒá stringiem, raz typem number. Wolna Amerykanka." />
      <div className="mockup-code bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">let</span> cost ={" "}
            <span className="text-success">"dwana≈õcie groszy"</span>
          </code>
        </pre>
        <pre>
          <code>
            console<span className="text-info">.log</span>(
            <span className="text-warning">typeof</span>{" "}
            <span className="text-success">cost</span>)
            <span className="text-base-100/50"> //string</span>
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            cost =<span className="text-success"> 12</span>
          </code>
        </pre>
        <pre>
          <code>
            console<span className="text-info">.log</span>(
            <span className="text-warning">typeof</span>{" "}
            <span className="text-success">cost</span>)
            <span className="text-base-100/50"> //number</span>
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            cost =<span className="text-success"> false</span>
          </code>
        </pre>
        <pre>
          <code>
            console<span className="text-info">.log</span>(
            <span className="text-warning">typeof</span>{" "}
            <span className="text-success">cost</span>)
            <span className="text-base-100/50"> //boolean</span>
          </code>
        </pre>
      </div>
      <PostText text="M√≥wi siƒô przez to, ≈ºe JavaScript jako jƒôzyk programowania jest s≈Çabo typowany." />
      <PostText text="Wszystko mo≈ºe okazaƒá siƒô wszystkim, jak w Tajlandii, gdy chcia≈Çe≈õ poje≈õƒá brzoskwiniƒô, a kelner poda≈Ç Ci bak≈Ça≈ºana." />
      <PostText text="TypeScript to JavaScript na sterydach. Cechuje go silne typowanie. Tyle i a≈º tyle." />
      <PostText text="Jak to wyglƒÖda w praktyce?" />
      <div className="mockup-code bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">let</span> isHeMoron{" "}
            <span className="text-info">: string</span> ={" "}
            <span className="text-success">"Yep"</span>
          </code>
        </pre>
        <pre>
          <code>
            isHeMoron =<span className="text-success"> true</span>
            <span className="text-base-100/50">
              {" "}
              //Type 'boolean' is not assignable to type 'string'
            </span>
          </code>
        </pre>
      </div>
      <PostText text="Og√≥lnie zrobi to o co go prosisz i zamieni naszego Yep na true, ale po drodze wywali ten soczysty error na twarz." />
      <PostText text="Warto te≈º pamiƒôtaƒá, ≈ºe je≈õli bƒôdziesz mia≈Ç w kodzie errory wynikajƒÖce z TypeScripta, to nie bƒôdziesz m√≥g≈Ç pu≈õciƒá swojej ≈õwie≈ºej jak bu≈Çeczki aplikacji w ≈õwiat, bo TypeScript Ciƒô nie przepu≈õci." />
      <PostText text="To bardzo dobry wartownik, a najwiƒôkszƒÖ jego zaletƒÖ jest to, ≈ºe na bie≈ºƒÖco sprawdza co odwalasz w kodzie i wytknie Ci ka≈ºdy, nawet najmniejszy duperelowaty b≈ÇƒÖd." />
      <PostText text="Wiƒôc je≈õli chcesz byƒá sam zadowolony, musisz wpierw zadowoliƒá TypeScript. Co≈õ jak z ≈ºonƒÖ. Je≈õli jƒÖ masz to wiesz o czym m√≥wiƒôüòâ" />
      <PostSubtitle subtitle="Wracamy na szlak" />
      <PostText text="Ten post trwa≈Çby w niesko≈Ñczono≈õƒá, gdybym mia≈Ç om√≥wiƒá ka≈ºde zagadnienie z TS-a." />
      <PostText text="Dzisiaj skupiamy siƒô wy≈ÇƒÖcznie na por√≥wnywaniu naszych dw√≥ch zawodnik√≥wü•ä" />
      <PostTextBold text="W lewym naro≈ºniku mamy el mui mui loco Interface, wa≈ºƒÖcy... nie wiadomo ile,  jednak znajƒÖcy siƒô tylko na jednym - na typowaniu obiekt√≥w." />
      <PostText text="Co dalej?" />
      <PostTextBold text="W prawym naro≈ºniku mamy Type Alias, wagni nieznanej, kt√≥ry wykracza poza marne typowanie obiekt√≥w. Jest gibki jak wƒÖ≈º i potrafi przyjƒÖƒá wiƒôcej na klatƒô." />
      <PostText text="Nie jest to gra Tekken ani Mortal Kombat, ale zacznijmy pojedynek. Niech wygra najlepszy!" />
      <PostSubtitle subtitle="Interface" />
      <PostText text="S≈Çu≈ºy do otypowania obiektu i g≈Ç√≥wnie do tego. Sk≈Çadnia wyglƒÖda mniej wiƒôcej tak:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">interface</span> Pokemon {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> string</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> charizard{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Charizard"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "fire"</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">const</span> pikachu{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Pikachu"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "electric"</span>
            {"}"}{" "}
          </code>
        </pre>
      </div>
      <PostText text="Mo≈ºe byƒá wiele interfejs√≥w o tej samej nazwie. Wtedy po prostu stajƒÖ siƒô one zmergowane w jeden - tzn. nak≈ÇadajƒÖ siƒô na siebie." />
      <PostText text="Przyk≈Çad:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">interface</span> Pokemon {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> string</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">interface</span> Pokemon {"{"}
            <span className="text-warning">form</span>:
            <span className="text-success"> number</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> charizard{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Charizard"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "fire"</span>,
            <span className="text-warning"> form</span>:
            <span className="text-success"> 3</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">const</span> pikachu{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Pikachu"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "electric"</span> {"}"}{" "}
            <span className="text-base-100/50">
              //Property 'form' is missing in type...
            </span>
          </code>
        </pre>
      </div>
      <PostText text="Jak widzisz TypeScriptowi ju≈º nie pasuje, ≈ºe Pikaczu nie ma podanej formy. W tym przyk≈Çadzie forma ewolucji pokemona sta≈Ça siƒô ju≈º obligatoryjna." />
      <PostText text="Chyba Pikaczu jest formƒÖ drugƒÖ tak na prawdƒô, bo by≈Ç jeszcze Piczu, ale cholera wie czy to osobny pokemon czy wcze≈õniejsza forma, whateva." />
      <PostText text="Nowy Interface mo≈ºna te≈º rozszerzyƒá przy u≈ºyciu extends. Jedziemy:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">interface</span> Person {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> age</span>:
            <span className="text-success"> number</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">interface</span> Developer{" "}
            <span className="text-info">extends</span> Person {"{"}
            <span className="text-warning"> isSmart</span>:
            <span className="text-error"> boolean</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> janusz{" "}
            <span className="text-info">: Person</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Janusz"</span>,
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> false</span>,
            <span className="text-warning"> age</span>:
            <span className="text-success"> 42</span>
            {"}"}
          </code>
        </pre>

        <pre>
          <code>
            <span className="text-accent">const</span> bartosz{" "}
            <span className="text-info">: Developer</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Bartosz"</span>,
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> age</span>:
            <span className="text-success"> 26</span>,
            <span className="text-warning"> isSmart</span>:
            <span className="text-error"> true</span>
            {"}"}
          </code>
        </pre>
      </div>
      <PostText text="Nie musimy mieƒá wiedzy o inteligencji Janusza, bo w Person nie jest to wymagane." />
      <PostText text="Ale je≈õli chcemy, by Bartosz by≈Ç rasowym Developerem, musimy wiedzieƒá, ≈ºe jest cz≈Çowiekiem (Person) a nie SI oraz czy jest bystry. W tym przypadku jest." />
      <PostText text="Je≈õli jeste≈õ fanem Batmanaü¶á, to poni≈ºszy przyk≈Çad bƒôdzie dla Ciebie jak znalaz≈Ç, bo znajdziemy mu Catwomanüêà‚Äç‚¨õ:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">interface</span> Cat {"{"}
            <span className="text-warning"> hasClaws</span>:
            <span className="text-error"> boolean</span>,
            <span className="text-warning"> hasFurr</span>:
            <span className="text-error"> boolean</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">interface</span> Woman {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">interface</span> Catwoman{" "}
            <span className="text-info">extends</span> Cat, Woman {"{"}
            <span className="text-warning"> age</span>:
            <span className="text-success"> number</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> selina{" "}
            <span className="text-info">: Catwoman</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Selina"</span>,
            <span className="text-warning"> hasClaws</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> hasFurr</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> age</span>:
            <span className="text-success"> 26</span>
            {"}"}
          </code>
        </pre>
      </div>
      <PostText text="No i powsta≈Ça kobieta kot. Nie wiem jakie Batman ma preferencje, szczeg√≥lnie te bardzo specyficzne (wink wink), ale Selina ma furr ustawione na true. Tak≈ºe jak nie ta to mo≈ºe TrujƒÖcy Bluszczüå±?" />
      <PostText text="Mo≈ºesz te≈º za pomocƒÖ Interface okre≈õliƒá typy argument√≥w i zwracanych warto≈õci Pos≈Çu≈ºmy siƒô starym dobrym przyk≈Çadem:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">interface</span> HireFunction
            <span>{" {"}</span>
          </code>
        </pre>
        <pre className="ml-6">
          <code>
            (<span className="text-warning">name</span> :{" "}
            <span className="text-success">string</span>) :{" "}
            <span className="text-success">string</span>
          </code>
        </pre>
        <pre>
          <span>{"}"}</span>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> hireMePlz{" "}
            <span className="text-info">: HireFunction</span> ={" "}
            <span className="text-info">
              (<span className="text-neutral">name</span>)
            </span>{" "}
            <span>{"=> {"}</span>
          </code>
        </pre>
        <pre className="ml-6">
          <code>
            return <span className="text-warning">name</span> +
            <span className="text-success"> ", masz tƒô pracƒô."</span>
          </code>
        </pre>
        <pre>
          <span>{"}"}</span>
        </pre>
        <pre>
          <code>
            <span className="text-accent">const</span> welcomeAboard ={" "}
            <span className="text-accent">hireMePlz</span>
            <span className="text-info">
              (<span className="text-success">"Krystian"</span>)
            </span>
          </code>
        </pre>
        <pre>
          <code>
            console<span className="text-info">.log</span>(
            <span>welcomeAboard</span>){" "}
            <span className="text-base-300">// "Krystian, masz tƒô pracƒô."</span>
          </code>
        </pre>
      </div>
      <PostText text="W tym przyk≈Çadzie wskazali≈õmy jasno jaki typ ma mieƒá argument oraz jaki typ ma zostaƒá zwr√≥cony." />
      <PostText text="Interfejs√≥w te≈º mo≈ºesz u≈ºyƒá do implementacji przez klasy - nie bedƒô jednak tego syfu tyka≈Ç, bo na my≈õl o klasach dostajƒô epilepsji." />
      <PostSubtitle subtitle="Type Alias" />
      <PostText text="Aliasy typ√≥w (paskudna nazwa) majƒÖ wiƒôksze mo≈ºliwo≈õci, bo nie ograniczajƒÖ siƒô tylko do obiekt√≥w." />
      <PostText text="Mo≈ºemy tak samo okre≈õliƒá nasze pokemony jak z interface, luknij:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Pokemon = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> string</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> charizard{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Charizard"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "fire"</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">const</span> pikachu{" "}
            <span className="text-info">: Pokemon</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Pikachu"</span>,
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> "electric"</span>
            {"}"}{" "}
          </code>
        </pre>
      </div>
      <PostText text="O ile majƒÖc pierdyliard interface o nazwie Pokemon by≈Ço spoko, Type Alias mo≈ºe byƒá tylko jeden. Nie ma, ≈ºe:" />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Pokemon = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isInPokedex</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> typeOfPokemon</span>:
            <span className="text-success"> string</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">type</span> Pokemon = {"{"}
            <span className="text-warning">form</span>:
            <span className="text-success"> number</span>
            {"}"}
          </code>
        </pre>
      </div>
      <PostText text="To nie przejdzie." />
      <PostText text="Type Alias inaczej te≈º radzi sobie z dziedziczeniem. Nie ma tu extends, ale jest za to &." />
      <div className="mockup-code mb-4 bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Person = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> string</span>;
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> boolean</span>;
            <span className="text-warning"> age</span>:
            <span className="text-success"> number</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">type</span> Developer = Person
            <span className="text-info"> &</span> {"{"}
            <span className="text-warning"> isSmart</span>:
            <span className="text-error"> boolean</span>
            {"}"}
          </code>
        </pre>
        <pre></pre>
        <pre>
          <code>
            <span className="text-accent">const</span> janusz{" "}
            <span className="text-info">: Person</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Janusz"</span>,
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> false</span>,
            <span className="text-warning"> age</span>:
            <span className="text-success"> 42</span>
            {"}"}
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">const</span> bartosz{" "}
            <span className="text-info">: Developer</span> = {"{"}
            <span className="text-warning">name</span>:
            <span className="text-success"> "Bartosz"</span>,
            <span className="text-warning"> isFunny</span>:
            <span className="text-error"> true</span>,
            <span className="text-warning"> age</span>:
            <span className="text-success"> 26</span>,
            <span className="text-warning"> isSmart</span>:
            <span className="text-error"> true</span>
            {"}"}
          </code>
        </pre>
      </div>
      <PostText text="Mimo innej sk≈Çadni, efekt jest ten sam." />
      <PostTextBold text="Co jeszcze potrafi to cude≈Ñko?" />
      <PostText text="A no, type alias potrafi  typowaƒá nie tylko obiekty, ale te≈º zwyk≈Çe klasyczne zmienne." />
      <PostText text="Tym bije na g≈Çowƒô Interface tak mocno, ≈ºe mamy pierwszy nokaut!!! Drodzy Pa≈Ñstwo co za widowisko!" />
      <PostText text="Na przyk≈Çad mo≈ºemy okre≈õliƒá, ≈ºe nasza zmienna mo≈ºe miec typ string lub boolean:" />
      <div className="mockup-code bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Animal =
            <span className="text-warning"> string</span> |
            <span className="text-warning"> boolean</span>
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">let</span> isItBird{" "}
            <span className="text-info">: Animal</span> ={" "}
            <span className="text-success">"tak, to paputek"</span>
          </code>
        </pre>
        <pre>
          <code>
            isItBird =<span className="text-warning"> true</span>
          </code>
        </pre>
      </div>
      <PostText text="Dobra, przyznam, ≈ºe mo≈ºe akurat ten example nie jest do ko≈Ñca udany, ale chocia≈º ogarniasz, ≈ºe mo≈ºna przydzieliƒá zmiennej parƒô typ√≥w. Miƒôdzy string a boolean jest pionowa kreska, czyli nasze lub." />
      <PostText text="Mo≈ºemy te≈º okre≈õliƒá bardziej precyzyjnie czym nasza zmienna mo≈ºe byƒá:" />
      <div className="mockup-code bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Theme =
            <span className="text-warning"> 'light'</span> |
            <span className="text-warning"> 'dark'</span>
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">let</span> theme{" "}
            <span className="text-info">: Theme</span> ={" "}
            <span className="text-success">"dark"</span>
          </code>
        </pre>
        <pre>
          <code>
            theme =<span className="text-success"> 'light'</span>
          </code>
        </pre>
      </div>
      <PostText text="W tym przypadku nasza zmienna mo≈ºe byƒá albo stringiem o nazwie dark albo stringiem o nazwie light. Sprytne." />
      <PostText text="Opr√≥cz tego typu rzeczy, Type Alias mo≈ºe przechowywaƒá inne Type Aliasy, czyli taka incepcja:" />
      <div className="mockup-code bg-primary text-neutral">
        <pre>
          <code>
            <span className="text-accent">type</span> Animal =
            <span className="text-warning"> string</span> |
            <span className="text-warning"> boolean</span>
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">type</span> Theme =
            <span className="text-warning"> 'light'</span> |
            <span className="text-warning"> 'dark'</span>
          </code>
        </pre>
        <pre>
          <code>
            <span className="text-accent">type</span> WeirdShit =
            <span className="text-warning"> Animal</span> |
            <span className="text-warning"> Theme</span>
          </code>
        </pre>
      </div>
      <PostSubtitle subtitle="Wiƒôcej grzech√≥w nie pamiƒôtam" />
      <PostText text="Z rzeczy wsp√≥lnych to oba te sposoby mogƒÖ typowaƒá klasy." />
      <PostText text="Mam jakƒÖ≈õ awersjƒô do klas, dlatego nie bƒôdzie przyk≈Çadu. Bƒôde musia≈Ç obagadaƒá to na psychoterapii, bo widoczny jest op√≥rüòè" />
      <PostText text="To sƒÖ w≈Ça≈õnie najwa≈ºniejsze r√≥≈ºnice. A kto wygra≈Ç?" />
      <PostTextBold text="To zale≈ºy." />
      <PostText text="Je≈õli znasz Type Alias, a nie znasz Interface, to poradzisz sobie. W drugƒÖ stronƒô bƒôdzie ciƒô≈ºko..." />
      <PostText text="Go≈Çym okiem widaƒá, ≈ºe typy alias√≥w majƒÖ wiƒôcej bajer√≥w, jak te kalkukatory z 40 innymi przyciskami, sinus, cosinus, liczenie Pi, rycza≈Çtu i podatk√≥w na zawo≈Çanie." />
      <PostText text="Z drugiej strony jak wiesz, ≈ºe obiekt mo≈ºe byƒá rozszerzony w przyszo≈õci to mo≈ºesz szybko dodaƒá drugi Inteface o tej samej nazwie i siƒô zmergujƒÖ." />
      <PostText text="Do czego ja u≈ºywam Interface zazwyczaj? No wiƒôc do typowania props√≥w w komponencie reactowym oraz do typowania obiekt√≥w np. pochodzƒÖcych z API." />
      <PostTextBold text="Gdzie diabe≈Ç Interface u≈ºyƒá nie mo≈ºe tam Type Alias po≈õle." />
      <PostText text="Wiele natomiast zale≈ºy od specyfiki projektu i jak do≈ÇƒÖczysz do zespo≈Çu, gdzie psyüê∂ szczekajƒÖ dupami to bƒôdziesz szczekaƒá razem z nimi i schowasz dumƒô w kiesze≈Ñ." />
      <PostText text="No chyba, ≈ºe bƒôdziesz mieƒá respekt na programistycznej dzielni +50. Wtedy mo≈ºesz poruszyƒá ten temat." />
      <PostText text="Na pewno o czym≈õ zapomnia≈Çem, a je≈õli tak, to resztƒô dopowie dokumentacjaüìú" />
      <PostText text="Czo≈Çem, do nastƒôpnego!" />
    </div>
  );
};
export default Post13;
